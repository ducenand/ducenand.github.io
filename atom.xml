<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ducenand.github.io/</id>
    <title>似水流年</title>
    <updated>2019-06-30T11:55:33.133Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ducenand.github.io/"/>
    <link rel="self" href="https://ducenand.github.io//atom.xml"/>
    <subtitle>一万年太久，只争朝夕！</subtitle>
    <logo>https://ducenand.github.io//images/avatar.png</logo>
    <icon>https://ducenand.github.io//favicon.ico</icon>
    <rights>All rights reserved 2019, 似水流年</rights>
    <entry>
        <title type="html"><![CDATA[探索与发现：第2期]]></title>
        <id>https://ducenand.github.io//post/tan-suo-yu-fa-xian-di-2-qi</id>
        <link href="https://ducenand.github.io//post/tan-suo-yu-fa-xian-di-2-qi">
        </link>
        <updated>2019-06-30T06:25:53.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>这里记录一周新鲜有趣的发现和探索。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>这里记录一周新鲜有趣的发现和探索。</p>
</blockquote>
<!-- more --> 
<p>1、6月24日中国篮球史上第一个世界冠军。中国女篮19-13胜匈牙利女篮，夺得3X3篮球世界杯女篮冠军。中国3X3女篮同时获得2020年奥运会的参赛资格，创造历史！</p>
<p>2、随着《千与千寻》动画在中国大陆上映，真贵的配音现场片段也随即爆光，一部经典的动画作品真的少不了强大的配音。<br /><a href="https://www.yuque.com/attachments/yuque/0/2019/mp4/173770/1561864085626-3a16701f-2797-4786-8938-a2bfa1c108f4.mp4?_lake_card=%7B%22uid%22%3A%221561864067280-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fmp4%2F173770%2F1561864085626-3a16701f-2797-4786-8938-a2bfa1c108f4.mp4%22%2C%22name%22%3A%222914292747ad42a1be5f85c153033562-9adf1cf7bb43e0e1395fd9821fa3a5fd-sd.mp4%22%2C%22size%22%3A9985101%2C%22type%22%3A%22video%2Fmp4%22%2C%22ext%22%3A%22mp4%22%2C%22progress%22%3A%7B%22percent%22%3A0%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22UnInT%22%2C%22card%22%3A%22file%22%7D">2914292747ad42a1be5f85c153033562-9adf1cf7bb43e0e1395fd9821fa3a5fd-sd.mp4</a></p>
<p>3、哈佛最新研究：AI预测精神分裂，准确率达93%，来自哈佛大学和埃默里大学的科学团队已经研究出一套机器学习方法，它可以通过分析一个人表达出的言语，预测这个人以后是否会患精神分裂症。</p>
<p>4、6月24据猫眼数据，2019年度中国电影总票房突破300亿元。这个速度比2018年突破300亿晚了一周，去年突破300亿的时间点是2018年6月16日。<br /><strong>截至目前的2019票房前十：</strong><br />1.《流浪地球》<br />2.《复仇者联盟4:终局之战》<br />3.《疯狂的外星人》<br />4.《飞驰人生》<br />5.《大黄蜂》<br />6.《惊奇队长》<br />7.《比悲伤更悲伤的故事》<br />8.《哥斯拉2：怪兽之王》<br />9.《阿丽塔：战斗天使》<br />10.《反贪风暴4》</p>
<p>5、比尔·盖茨出席Village Global说到软件是一个很神奇的东西，而且软件是未来数字世界的先决条件。 <br /><a href="https://www.yuque.com/attachments/yuque/0/2019/mp4/173770/1561864916438-443db94c-4b5a-4411-a8fb-d1fb2e03a13d.mp4?_lake_card=%7B%22uid%22%3A%221561864913795-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fmp4%2F173770%2F1561864916438-443db94c-4b5a-4411-a8fb-d1fb2e03a13d.mp4%22%2C%22name%22%3A%22f914a80cdada4e86935ad59dc556901c-9a3ca7dcacc1812df5698670918c4052-sd.mp4%22%2C%22size%22%3A12974736%2C%22type%22%3A%22video%2Fmp4%22%2C%22ext%22%3A%22mp4%22%2C%22progress%22%3A%7B%22percent%22%3A0%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%222qfmo%22%2C%22card%22%3A%22file%22%7D">f914a80cdada4e86935ad59dc556901c-9a3ca7dcacc1812df5698670918c4052-sd.mp4</a></p>
<p>6、谷歌刚刚创建时使用的是一个极不显眼的名字“Backrub”（网络爬虫），耐克的曾用名则是 Blue Ribbon Sports（蓝丝带体育），而雅虎最初创建时曾命名为“杰瑞和大卫的万维网指南”。通过公司的改名史，挖掘一个公司背后故事。<br /><a href="https://www.yuque.com/attachments/yuque/0/2019/mp4/173770/1561865245086-4e030b9d-0acd-4435-aed3-79aa958a7ee1.mp4?_lake_card=%7B%22uid%22%3A%221561865242174-0%22%2C%22src%22%3A%22https%3A%2F%2Fwww.yuque.com%2Fattachments%2Fyuque%2F0%2F2019%2Fmp4%2F173770%2F1561865245086-4e030b9d-0acd-4435-aed3-79aa958a7ee1.mp4%22%2C%22name%22%3A%2263dfb704f7684249a777508ba088e1bc-91a8eef67cb2a526bf1e811d854f2873-sd.mp4%22%2C%22size%22%3A13971233%2C%22type%22%3A%22video%2Fmp4%22%2C%22ext%22%3A%22mp4%22%2C%22progress%22%3A%7B%22percent%22%3A0%7D%2C%22status%22%3A%22done%22%2C%22percent%22%3A0%2C%22id%22%3A%22HN71z%22%2C%22card%22%3A%22file%22%7D">63dfb704f7684249a777508ba088e1bc-91a8eef67cb2a526bf1e811d854f2873-sd.mp4</a></p>
<p>7、近日，泰国政府出台了一项新法规，在家中抽烟将被视作家暴罪，可能遭刑事检控及需戒烟。泰国妇女事务和家庭发展部主任称，在家中吸烟可能对健康有害，因此是对生活在同一屋檐下其他人的一种暴力形式。该法案将于8月20日生效。</p>
<p>8、<a href="https://haokan.baidu.com/v?pd=wisenatural&amp;vid=6165330621953265666">东京大学研发团队研发出房间任意位置都可无线充电的系统。</a>该系统是通过在墙壁和地板上埋入供电机器，产生磁场，从而向室内空间进行送电。即使不插插座也能给电器充电，进入这个空间内手机等电器都自动充电，研究团队称该无线充电设备对人体健康无影响。</p>
<p>9、<strong>街舞</strong>等四项新运动有望加入2024巴黎奥运会。当地时间6月25日，国际奥委会第134届全会在瑞士洛桑召开，大会一致通过一项建议：<strong>滑板、攀岩、冲浪和霹雳舞</strong>有望成为2024巴黎奥运会的新项目。这四项运动将进入观察期，最终决定将在2020年12月的国际奥委会执委会上做出。</p>
<p>10、20世纪60年代，编程被看作是适合女孩子的工作，女性时尚杂志《时尚》（Cosmopolitan Magazine）称，编程这个工作很适合女孩子，收入很高（实习生8000美金一年，高级系统分析师2万美金一年；1960年的2万美金相当于现在的17万美金），并且刊登了 IBM 的系统工程师 Ann Richardson 的照片。——<a href="https://www.huxiu.com/article/305417.html">计算机刚出现的时候，是用女人头做计算能力单位的</a><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561871830018-58ce3948-7b8f-49bb-9908-d4c6de4afdd6.png#align=left&amp;display=inline&amp;height=570&amp;name=image.png&amp;originHeight=1140&amp;originWidth=1416&amp;size=1772949&amp;status=done&amp;width=708" alt="image.png"></p>
<p>11、<a href="https://tiptap.scrumpy.io/">Tiptap</a> 基于vue.js的无渲染编辑器，该编辑器基于Prosemirror，完全可扩展且无渲染。您可以轻松地将自定义节点添加为Vue组件。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561872015343-7e5c577c-59e4-47fb-8b55-668abc391cf5.png#align=left&amp;display=inline&amp;height=271&amp;name=image.png&amp;originHeight=542&amp;originWidth=1288&amp;size=69973&amp;status=done&amp;width=644" alt="image.png"></p>
<p>12、<a href="https://github.com/callstack/linaria">Linaria</a> 一个可以在JS中编写CSS的react模块，运行时为零，在构建期间将CSS提取到CSS文件。</p>
<p>13、<a href="https://github.com/jdan/cleaver">Cleaver</a>是一个基于HTML5，可以用最短的时间做出超炫幻灯片的小工具。<br /><img src="https://cdn.nlark.com/yuque/0/2019/gif/173770/1561872657674-a9789288-dd2f-4e79-96c5-d0f62d1163d6.gif#align=left&amp;display=inline&amp;height=768&amp;name=68747470733a2f2f692e636c6f756475702e636f6d2f634973734b466a6342362e676966.gif&amp;originHeight=768&amp;originWidth=1092&amp;size=173254&amp;status=done&amp;width=1092" alt="68747470733a2f2f692e636c6f756475702e636f6d2f634973734b466a6342362e676966.gif"><br />
14、<a href="https://tucao.qq.com/">“吐个槽”反馈平台</a> 腾讯推出的工具，几行代码就可以为页面加入一个互动社区，可以接入应用程序、小程序、WEB、H5、微信公众号等各端。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[依赖Nodejs]]></title>
        <id>https://ducenand.github.io//post/yi-lai-nodejs</id>
        <link href="https://ducenand.github.io//post/yi-lai-nodejs">
        </link>
        <updated>2019-06-27T00:31:51.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560946813959-89c89678-4d53-4294-a0ce-44ef96244af2.png#align=left&amp;display=inline&amp;height=352&amp;name=image.png&amp;originHeight=704&amp;originWidth=1748&amp;size=303588&amp;status=done&amp;width=874" alt="image.png">
<a name="mxMDY"></a></p>
<h3 id="背景">背景</h3>
<p>在<a href="https://ducenand.github.io/post/webpack-yu-gruntgulp-de-qu-bie/">前端历史演变</a>中已经提到，Nodejs的爆发从2009年开始。Nodejs的出现，基于作者Ryan Dahl 对Web开发高性能的追求，要达到高性能，异步IO/事件驱动是基本原则。对比一些高级语言，最终选择Javascript作为开发语言,由于Javascript天生的事件驱动和单线程，奠定了Nodejs编写高性能Web服务轻而易举。</p>
]]></summary>
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560946813959-89c89678-4d53-4294-a0ce-44ef96244af2.png#align=left&amp;display=inline&amp;height=352&amp;name=image.png&amp;originHeight=704&amp;originWidth=1748&amp;size=303588&amp;status=done&amp;width=874" alt="image.png">
<a name="mxMDY"></a></p>
<h3 id="背景">背景</h3>
<p>在<a href="https://ducenand.github.io/post/webpack-yu-gruntgulp-de-qu-bie/">前端历史演变</a>中已经提到，Nodejs的爆发从2009年开始。Nodejs的出现，基于作者Ryan Dahl 对Web开发高性能的追求，要达到高性能，异步IO/事件驱动是基本原则。对比一些高级语言，最终选择Javascript作为开发语言,由于Javascript天生的事件驱动和单线程，奠定了Nodejs编写高性能Web服务轻而易举。</p>
<!-- more --> 
<p><a name="cutZq"></a></p>
<h3 id="简单了解nodejs">简单了解Nodejs</h3>
<blockquote>
<p>Node.js 是一个基于 <strong>Chrome V8 引擎</strong>的 <strong>JavaScript 运行环境</strong>。 
Node.js 使用了一个<strong>事件驱动</strong>、<strong>非阻塞式 I/O</strong> 的模型，使其轻量又高效。</p>
</blockquote>
<p>以上是官方给出的解释，惯例我们还是抽取关键词理解。
<a name="fTNxv"></a></p>
<h4 id="chrome-v8-引擎介绍">Chrome V8 引擎介绍</h4>
<p>V8 引擎是Chrome于2008年9月2日发布开源。V8使用C++开发，相比其它的JavaScript的引擎转换成<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81">字节码</a>或<a href="https://baike.baidu.com/item/%E8%A7%A3%E9%87%8A%E6%89%A7%E8%A1%8C">解释执行</a>，V8将其编译成原生<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E7%A0%81">机器码</a>（<a href="https://baike.baidu.com/item/IA-32">IA-32</a>, <a href="https://baike.baidu.com/item/x86-64">x86-64</a>, <a href="https://baike.baidu.com/item/ARM/7518299">ARM</a>, or <a href="https://baike.baidu.com/item/MIPS">MIPS</a> CPUs），并且使用了如内联缓存（inline caching）等方法来提高性能。有了这些功能，JavaScript程序在V8引擎下的<strong>运行速度媲美二进制程序</strong>。<br />Chrome浏览器在Webkit渲染引擎中使用v8引擎来提高浏览器的渲染性能。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560989504270-19142662-a597-434f-bda5-9cf7fe586b73.png#align=left&amp;display=inline&amp;height=311&amp;name=image.png&amp;originHeight=622&amp;originWidth=1192&amp;size=302086&amp;status=done&amp;width=596" alt="image.png"><br />上图是webkit大致结构，红色部分是webkit的默认引擎，在谷歌系列产品中被替换为v8引擎；<br />Nodejs是站在“<strong>巨人的肩膀</strong>”上进行一系列的封装，它的高性能，离不开Chorme V8引擎。
<a name="OOZYg"></a></p>
<h4 id="javascript-运行环境">JavaScript 运行环境</h4>
<p>Javascript 是一个静态脚本语言，运行时必须要借助于引擎才能运行。<br />Javascript 运行环境一般分为两种：</p>
<ul>
<li>浏览器运行环境 （ 通常我们写的js代码要在浏览器中才能运行）</li>
<li>非浏览器运行环境 （比如Nodejs,借助于V8引擎实现运行的环境）
<a name="LSuE2"></a></li>
</ul>
<h4 id="事件驱动">事件驱动</h4>
<p>我们在Javascript中注册个事件（回调函数）。但这个事件不是马上执行。只有等事件被触发的时候，才会去执行这个事件（回调函数）。这种形式就是事件驱动。
<a name="jBoeo"></a></p>
<h4 id="非阻塞-io">非阻塞 I/O</h4>
<p>**阻塞：**前一个程序未执行完就得一直等待。比如当你打电话问个问题时，那边说你等等我给你查查，这时候你电话仍然是挂起的，等待等待，直到拿到结果。 <br />
**非阻塞：**前一个程序未执行完时可以挂起，继续执行其他程序，等到使用时再执行。比如当你打电话过去问一个问题，然后挂电话，等那边找到结果就打电话给你。查问题这段时间，你该干嘛就干嘛。<br />
**I/O: **磁盘的写入（in）磁盘的读取（out）。在程序执行过程中必然要进行很多I/O操作，读写文件、输入输出、请求响应等等。I/O操作时最费时，举个例子，你要读一个文件，整个线程都暂停下来，等待文件读完后继续执行。换言之，I/O操作阻塞了代码的执行，极大地降低了程序的效率。<br />
<br />在Nodejs里面单线程可以通过回调函数（事件驱动）来做异步操作，达到非阻塞I/O的效果。</p>
<p><a name="ROAQP"></a></p>
<h3 id="安装nodejs">安装Nodejs</h3>
<ul>
<li>可以在官网自行选择安装包<a href="http://nodejs.cn/download/">下载</a></li>
<li>MacOS用户建议使用<a href="https://brew.sh/">brew</a>安装</li>
</ul>
<pre><code class="language-bash">#安装
brew install -g node
#卸载
brew uninstall nodejs
</code></pre>
<ul>
<li>使用<a href="https://github.com/nvm-sh/nvm">nvm</a>安装管理Nodejs版本</li>
</ul>
<pre><code class="language-bash">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
# or
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
# 放入环境变量
source ~/.bash_profile
# 判断是否安装成功
nvm list
# 安装node
nvm install 6.14.4 # or 10.10.0, 8.9.1, etc
# 判断node安装成功
node -v
npm -v

</code></pre>
<p><a name="ec5SJ"></a></p>
<h3 id="nodejs-的简单使用">Nodejs 的简单使用</h3>
<p><a name="jftAl"></a></p>
<h4 id="模块化规范-commonjs">模块化规范 CommonJs</h4>
<p>在<a href="https://ducenand.github.io/post/qian-duan-mo-kuai-hua/">前端模块化</a>中已经对CommonJs做了介绍，并使用exports导出模块，require引入模块，实现了一个简单案例。</p>
<ul>
<li>require:引入一个模块</li>
<li>exports: 导出模块内容</li>
<li>module: 模块本身
<a name="34sz0"></a></li>
</ul>
<h4 id="使用nodejs创建服务">使用Nodejs创建服务</h4>
<pre><code class="language-javascript">// index.js
const http = require('http');

const hostname = '127.0.0.1';
const port = 3000;

const server = http.createServer((req, res) =&gt; {
  res.statusCode = 200;
  res.setHeader('Content-Type', 'text/plain');
  res.end('Hello World\n');
});

server.listen(port, hostname, () =&gt; {
  console.log(`Server running at http://${hostname}:${port}/`);
});
</code></pre>
<p>运行 <code>node index.js</code> 会起一个去 <code>127.0.0.1:3000</code> 的服务，并在浏览器中输出<code>Hello world</code><br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561560892621-cd119fbb-e53c-465b-9fb9-7d9c4e3a7238.png#align=left&amp;display=inline&amp;height=110&amp;name=image.png&amp;originHeight=220&amp;originWidth=480&amp;size=18190&amp;status=done&amp;width=240" alt="image.png">
<a name="nbTh4"></a></p>
<h4 id="了解基础api">了解基础API</h4>
<p><code>path</code> 模块提供用于处理文件路径和目录路径的实用工具。</p>
<pre><code class="language-javascript">// 引用
const path = require('path');
path.join('/foo', 'bar', 'baz/asdf', 'quux', '..');
// 返回: '/foo/bar/baz/asdf'

// path.resolve() 方法将路径或路径片段的序列解析为绝对路径
path.resolve('/foo/bar', './baz');
// 返回: '/foo/bar/baz'
</code></pre>
<p><code>fs</code>文件系统模块，对文件和目录进行读写操作。</p>
<pre><code class="language-javascript">// 引用
const fs = require('fs');
// 读取文件
fs.readFile('./test.txt', function(err, data) {
    if (err) {
        throw err;
    }
    console.log(data);
});
// 写入文件
fs.writeFile('input.txt', '我是新写入的内容', function (err) {
   if (err) console.error(err);
   console.log('数据写入的数据');
 });
// 删除
fs.unlink('/tmp/hello', (err) =&gt; {
  if (err) throw err;
  console.log('已成功删除 /tmp/hello');
});
// 重命名
fs.rename('/tmp/hello', '/tmp/world', (err) =&gt; {
  if (err) throw err;
  console.log('重命名完成');
});
</code></pre>
<p>更多<code>Api</code>参考<a href="http://nodejs.cn/api/">Nodejs Api</a> 官网。</p>
<p>参考：<br /><a href="https://blog.csdn.net/heyeqingquan/article/details/78839699">Chrome V8 引擎介绍</a><br /><a href="https://baike.baidu.com/item/V8/6178125">百度百科V8介绍</a><br /><a href="https://nodejs.org/zh-cn/docs/guides/">Nodejs官网指南</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端模块化]]></title>
        <id>https://ducenand.github.io//post/qian-duan-mo-kuai-hua</id>
        <link href="https://ducenand.github.io//post/qian-duan-mo-kuai-hua">
        </link>
        <updated>2019-06-25T13:20:21.000Z</updated>
        <summary type="html"><![CDATA[<p><a name="FHuyl"></a></p>
<h3 id="解释">解释</h3>
<p>前端模块化是将一个复杂的系统分解出多个模块，每个模块职责单一、相互独立、高度解耦并可替换。一般前端模块化指的是Javascript的模块。最常见的是Nodejs的NPM包。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a name="FHuyl"></a></p>
<h3 id="解释">解释</h3>
<p>前端模块化是将一个复杂的系统分解出多个模块，每个模块职责单一、相互独立、高度解耦并可替换。一般前端模块化指的是Javascript的模块。最常见的是Nodejs的NPM包。</p>
 <!-- more --> 
<p>模块化开发的四点好处：</p>
<ul>
<li>避免变量污染，命名冲突</li>
<li>提高代码复用率</li>
<li>提高了可维护性</li>
<li>方便依赖关系管理</li>
</ul>
<p>模块化也是组件化的基石，是构成现在色彩斑斓的前端世界的前提条件。</p>
<p><a name="ZZHpF"></a></p>
<h3 id="常见的模块化规范">常见的模块化规范</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561430794751-423088d7-9b4c-4b66-89ce-bb84b077ee81.png#align=left&amp;display=inline&amp;height=155&amp;name=image.png&amp;originHeight=310&amp;originWidth=1242&amp;size=69723&amp;status=done&amp;width=621" alt="image.png"><br />Javascript在早期的设计中就没有模块、包、类的概念，开发者需要模拟出类似的功能，来隔离、组织复杂的Javascript代码，我们称为模块化。有了模块化之后的代码，我们考虑更多的<strong>代码使用和维护成本</strong>问题，然后就有很多模块化的规范。常见的模块化规范有<strong>CommonJs、AMD、CMD、ES6 Module</strong>等规范。</p>
<p><a name="Thbon"></a></p>
<h4 id="commonjs">CommonJs</h4>
<p>CommonJs是服务端模块化规范，Nodejs采用了这个规范并把它发扬光大。</p>
<pre><code class="language-javascript">//example.js
var n = 1;
function sayHello( name ){
    var name = name || &quot;Tom&quot;;
    return &quot;Hello~&quot;+name
}
function addFn(val){
    var val = val.x+val.y;
    return val
}
module.exports ={
    n:n,
    sayHello:sayHello,
    addFn:addFn
}
//main.js
var example = require('./example.js');
var addNum = {
    &quot;x&quot;:10,
    &quot;y&quot;:5
}
console.log( example )//查看example输出的对外模块接口；
console.log( example.n )//1;
console.log( example.sayHello(&quot;Jack&quot;) )// &quot;Hello~ Jack&quot;;
console.log( example.addFn(addNum) ) //15;
</code></pre>
<p>CommonJS 加载模块是同步的，所以只有加载完成才能执行后面的操作。像Nodejs主要用于服务器的编程，加载的模块文件一般都已经存在本地硬盘，所以加载起来比较快，不用考虑异步加载的方式，所以CommonJS规范比较适用。但如果是<strong>浏览器环境</strong>，要从服务器加载模块，这是就必须采用异步模式。所以就有了 AMD CMD 解决方案。</p>
<p><a name="h5mKU"></a></p>
<h4 id="amdasynchromous-module-definition-异步模块定义">AMD（Asynchromous Module Definition） 异步模块定义</h4>
<p>AMD 是客户端模块管理工具库<a href="https://www.zhihu.com/question/20351507/answer/14859415">RequireJS</a>提出并且完善的一套模块化规范，AMD 是基于异步加载模块的方式。<br />特点 ：异步加载，不阻塞页面的加载，能并行加载多个模块，但是不能按需加载，必须提前加载所需依赖</p>
<pre><code class="language-javascript">// 用define 定义模块
define({
    method1: function() {},
    method2: function() {},
});
// 定义模块时引用其他模块
define(['module1', 'module2'], function(m1, m2) {
   ...
});
// require 调用模块
require(['foo', 'bar'], function ( foo, bar ) {
        foo.doSomething();
});
</code></pre>
<p><a name="3EfCA"></a></p>
<h4 id="cmdcommon-module-definition通用模块定义">CMD（Common Module Definition）通用模块定义</h4>
<p>CMD 是国内大牛玉伯提出来的，实现的库是<a href="http://seajs.github.io/seajs">SeaJs</a>.</p>
<pre><code class="language-javascript">// test1.js
define(function(require,exports,module){
    ...
    module.exports={
        ...
    }
})

// test2.js
define(function(require,exports,module){    
    var cmd = require('./test1') 
    // cmd.xxx 依赖就近书写
    // 通过 exports 对外提供接口
    exports.doSomething = ...

    // 或者通过 module.exports 提供整个接口
    module.exports = ...
})
</code></pre>
<p><a name="TYMGg"></a></p>
<h4 id=""></h4>
<p><a href="http://es6.ruanyifeng.com/#docs/module-loader#ES6-%E6%A8%A1%E5%9D%97%E4%B8%8E-CommonJS-%E6%A8%A1%E5%9D%97%E7%9A%84%E5%B7%AE%E5%BC%82"><strong>CMD与AMD的区别：</strong></a></p>
<ol>
<li>对于依赖的模块，AMD 是提前执行，CMD 是延迟执行。</li>
<li>CMD 推崇依赖就近，AMD 推崇依赖前置。</li>
</ol>
<pre><code class="language-javascript">define(function(require, exports, module) {
var a = require('./a')
a.doSomething()
// 此处略去 100 行
var b = require('./b') // 依赖可以就近书写
b.doSomething()
// ...
})
// AMD 默认推荐的是
define(['./a', './b'], function(a, b) {  // 依赖必须一开始就写好
a.doSomething()
// 此处略去 100 行
b.doSomething()
...
})
</code></pre>
<p><a name="jg1At"></a></p>
<h4 id="es6-module">ES6 Module</h4>
<p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 CommonJS 和 AMD 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。<br />ES6 的模块自动采用严格模式，不管你有没有在模块头部加上<code>&quot;use strict&quot;</code>;并使用export、import 命令实现导出引用模块。</p>
<pre><code class="language-javascript">// profile.js
var firstName = 'Michael';
var lastName = 'Jackson';
var year = 1958;

export { firstName, lastName, year };

// main.js
import { firstName, lastName, year } from './profile.js';

function setName(element) {
  element.textContent = firstName + ' ' + lastName;
}
//export default 命令

// export-default.js
export default function () {
  console.log('foo');
}
// import-default.js
import customName from './export-default';
customName(); // 'foo'

</code></pre>
<p><strong>ES6 Module 与 CommonJS 的区别</strong></p>
<ol>
<li>CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。</li>
<li>CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。</li>
</ol>
<p><a name="vQKAE"></a></p>
<h3 id="区分模块与组件">区分模块与组件</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561301838681-54a17420-c175-49e6-a6fc-d3f1b1bc074f.png#align=left&amp;display=inline&amp;height=239&amp;name=image.png&amp;originHeight=409&amp;originWidth=630&amp;size=103461&amp;status=done&amp;width=368" alt="image.png"><br /><strong>前端模块</strong>侧重的功能的封装，主要是针对Javascript代码，隔离、组织复制的javascript代码，将它封装成一个个具有特定功能的的模块。<br />模块可以通过传递参数的不同修改这个功能的的相关配置，每个模块都是一个单独的作用域，根据需要调用。<br />一个模块的实现可以依赖其它模块。</p>
<p><strong>前端组件</strong>更多关注的UI部分，页面的每个部件，比如头部，底部、内容区，弹出框都可以成为一个组件，每个组件有独立的HTML、CSS、JS代码。<br />可以根据需要把它放在页面的任意部位，也可以和其他组件一起形成新的组件。一个页面是各个组件的结合，可以根据需要进行组装。</p>
<p><strong>扩展：站在业务的角度架构的视角模块组件又可以这么分。</strong><br />模块和组件都是系统的组成部分。<br />从逻辑角度拆分系统后，得到的单元就是“模块”。<br />从物理角度来拆分系统后，得到的单元就是“组件”。<br />划分模块的主要目的是职责分离，划分组件的主要目的是单元复用。<br />假设我们要做一个学生管理系统，这个系统从逻辑的角度拆分，可以分为“登录注册模块”“个人成绩模块”；从物理的角度来拆分，可以拆分为Nginx、Web服务器、MySql。</p>
<p>参考：<br /><a href="https://blog.csdn.net/weixin_33913377/article/details/87954371">浅谈前端模块化</a><br /><a href="https://blog.csdn.net/qq_36709020/article/details/80056736">前端模块与组件的区别</a><br /><a href="https://www.cnblogs.com/best/p/10076782.html">30分钟学会前端模块化开发</a><br /><a href="https://www.cnblogs.com/chenzechuang/p/6559351.html">前端模块化、组件化的理解</a><br /><a href="https://www.zhihu.com/question/20351507/answer/14859415">知乎玉伯回复CMD和AMD的区别</a><br /><a href="">阮一峰ES6 Module 语法</a><br /><a href="">ES6 Module与CommonJs的差异化</a><br />从零开始学架构（李运华）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[探索与发现：第1期]]></title>
        <id>https://ducenand.github.io//post/tan-suo-yu-fa-xian-di-1-qi</id>
        <link href="https://ducenand.github.io//post/tan-suo-yu-fa-xian-di-1-qi">
        </link>
        <updated>2019-06-23T10:38:41.000Z</updated>
        <summary type="html"><![CDATA[<blockquote>
<p>这里记录一周新鲜有趣的发现和探索。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<blockquote>
<p>这里记录一周新鲜有趣的发现和探索。</p>
</blockquote>
<!-- more -->
<p>1、与不懂技术的人说明需求改变的复杂度，可以通过举例说明，比如你要盖房子,房子正盖着呢，你突然觉得楼层之前的距离有点近，希望楼层增加个0.5米。你觉得复杂吗？——卖桃者说</p>
<p>2、6月19日，Facebook发行了区块链数字货币白皮书（Libra），引起币圈的轰动，马化腾和王小川等企业家也对此议论纷纷。马化腾表示“技术不难，重在监管”，王小川则认为“世界会因此而变”。而此前被王小川diss的孙宇晨则调侃道：你不是说我们是骗子吗，怎么现在又觉得是区块链革命了？</p>
<p>3、6月20日在第三届图像识别竞赛<a href="http://www.vision.ee.ethz.ch/webvision/challenge_results.html">WebVision</a>中，阿里AI以82.54%的识别准确率击败了全世界150多支参赛队伍，获得冠军，将万物识别领域的历史纪录提升了3个百分点，该竞赛要求参赛的AI模型将1600万张图片精准分类到5000个类目中。<br />据了解，目前阿里AI 不仅能够以超级速度对海量图片进行分类，还能识别超过100万种物理实体，例如5万种植物、1万种鸟、1千种不同型号的车。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561282154767-80cacd1a-5f9b-4f3b-912d-7e77e79f7ec9.png#align=left&amp;display=inline&amp;height=283&amp;name=image.png&amp;originHeight=566&amp;originWidth=2302&amp;size=244143&amp;status=done&amp;width=1151" alt="image.png"><br />前5名分别是阿里、商汤、华为、百度、佳都科技，都是中国本土的互联网公司，可见中国在人工智能方面已经开始领先国际了。</p>
<p>4、来自全球大前端技术大会<a href="https://mp.weixin.qq.com/s/S_Unh-UYbb0cYL-bWrBmgQ">《Flutter:最新进展和未来展望》摘要</a>：Flutter 是 Google 帮助开发者在移动、Web 和桌面多个平台实现高质量原生应用程序的开源UI工具包。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561282039161-5fe6b327-8681-49b5-ad3c-45e28ee43a75.png#align=left&amp;display=inline&amp;height=286&amp;name=image.png&amp;originHeight=572&amp;originWidth=1342&amp;size=197315&amp;status=done&amp;width=671" alt="image.png"></p>
<p>5、6月17日四川宜宾发生6.0级地震，地震造成不同程度受灾和伤亡，哀悼！就在宜宾地震中，地震预警系统，提前了<strong>1分钟预警</strong>，减少了不必要的伤亡和损失，听李永乐老师讲解地震预警的原理。<br />区分地震预警和地震预报，地震预报是在地震之前告诉大家要地震了，地震预警是发生地震后警告周边的人地震马上要来了。<br />最早提出地震预警的是<strong>1868年美国地震学家库珀</strong>提出。<br />地震波分为P波（纵波）和S波（横波）P波引起建筑物上下波动，速度快，破坏力小。S波速度慢破坏力大。<br />地震预警的盲区地带的计算，和预警时间计算，登录YouTube搜索“李永乐老师”。</p>
<p>6、最近健身连锁品牌浩沙一夜崩盘，全国直营门店全线倒闭，<a href="https://m.huxiu.com/article/304928.html">“浩沙这么大品牌都倒闭，是不是健身房不能开了？</a><br />这里将为你揭开健身房中国20多年的顽疾，也为大家剖析目前处于混战阶段的各类健身房业态背后的真实逻辑和未来可能的发展趋势。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561282418276-fb5a3c83-c80f-4e08-9cc6-0500dc5a8a42.png#align=left&amp;display=inline&amp;height=357&amp;name=image.png&amp;originHeight=714&amp;originWidth=1256&amp;size=1426645&amp;status=done&amp;width=628" alt="image.png"></p>
<p>7、<a href="https://github.com/benhowdle89/grade">Grade</a> 这个JS 库可以从图像提取两种主要颜色，然后生成渐变色背景。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561284917190-708b177e-01fa-40aa-92a5-5b10c6a0d04f.png#align=left&amp;display=inline&amp;height=429&amp;name=image.png&amp;originHeight=858&amp;originWidth=1044&amp;size=765491&amp;status=done&amp;width=522" alt="image.png"><br />8、<a href="https://github.com/hiroppy/fusuma">Fusuma</a> 将 Markdown 文件转成幻灯片的工具，功能很强大，在本地起一个 HTTP 服务，完成很多后端功能。</p>
<pre><code class="language-bash">npm i fusuma -D
mkdir slides &amp;&amp; echo '# Hello😄' &gt; slides/title.md
npx fusuma init     # customize fusuma configuration
npx fusuma start    # development
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561284880773-b107ead8-d7d8-4c2b-b5e2-b9f6a97d34c1.png#align=left&amp;display=inline&amp;height=401&amp;name=image.png&amp;originHeight=802&amp;originWidth=1432&amp;size=46357&amp;status=done&amp;width=716" alt="image.png"><br />9、<a href="https://github.com/huangjianke/Gitter">Gitter</a> 一款GitHub 的微信小程序客户端，用户可以在微信上看Github。便捷、颜值高、代码开源。</p>
<p>10、<a href="https://cssfx.dev/">Cssfx</a> 该网站收集各种 CSS 特效，可以复制粘贴到自己的项目。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561285193038-633a2040-0890-4b7a-9f50-3182510f414b.png#align=left&amp;display=inline&amp;height=623&amp;name=image.png&amp;originHeight=1246&amp;originWidth=2310&amp;size=688953&amp;status=done&amp;width=1155" alt="image.png"></p>
<p>11、<a href="https://www.canva.cn/">Canva</a> 让不懂设计的你也能做出优美大片。一个在线图片设计网站。各种免费模板供你使用。<br /><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1561285391671-952a9120-7187-472a-b4fc-04ffbe090088.png#align=left&amp;display=inline&amp;height=345&amp;name=image.png&amp;originHeight=690&amp;originWidth=1942&amp;size=781645&amp;status=done&amp;width=971" alt="image.png"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[为什么选择Webpack?]]></title>
        <id>https://ducenand.github.io//post/wei-shi-me-xuan-ze-webpack</id>
        <link href="https://ducenand.github.io//post/wei-shi-me-xuan-ze-webpack">
        </link>
        <updated>2019-06-16T07:01:18.000Z</updated>
        <summary type="html"><![CDATA[<p><a name="RnUdT"></a></p>
<h3 id="社区活跃生态丰富">社区活跃生态丰富</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560927596479-93e6acbd-f8e0-411a-8523-14481328651e.png#align=left&amp;display=inline&amp;height=195&amp;name=image.png&amp;originHeight=390&amp;originWidth=1456&amp;size=59222&amp;status=done&amp;width=728" alt="image.png"></p>
]]></summary>
        <content type="html"><![CDATA[<p><a name="RnUdT"></a></p>
<h3 id="社区活跃生态丰富">社区活跃生态丰富</h3>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560927596479-93e6acbd-f8e0-411a-8523-14481328651e.png#align=left&amp;display=inline&amp;height=195&amp;name=image.png&amp;originHeight=390&amp;originWidth=1456&amp;size=59222&amp;status=done&amp;width=728" alt="image.png"></p>
<!-- more --> 
<p><a name="fbaoS"></a></p>
<h3 id="官方迭代速度快维护好">官方迭代速度快维护好</h3>
<ul>
<li>6月10-6月17 一周的活跃情况</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560783492113-d2596562-7054-459d-bebf-3fa26eb33124.png#align=left&amp;display=inline&amp;height=596&amp;name=image.png&amp;originHeight=1192&amp;originWidth=1486&amp;size=192070&amp;status=done&amp;width=743" alt="image.png">
<a name="jFFPd"></a></p>
<h3 id="配置灵活和插件化扩展">配置灵活和插件化扩展</h3>
<ul>
<li>
<p>配置很灵活对于不满足一些开发需要的，也是可以通过webpack插件机制进行扩展。定义自己的loader和plugin去满足自己团队个性化的需求。</p>
</li>
<li>
<p>官方维护的loader和plugins很多</p>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560782685930-f7868512-fc3b-485f-95ba-b71743444970.png#align=left&amp;display=inline&amp;height=646&amp;name=image.png&amp;originHeight=1292&amp;originWidth=1710&amp;size=708432&amp;status=done&amp;width=855" alt="image.png"></p>
<p>参考：<br /><a href="https://webpack.docschina.org/loaders/">官方维护的loader</a><br /><a href="https://webpack.docschina.org/plugins/">官方维护的plugins</a><br /><a href="https://github.com/webpack/webpack/pulse">webpack活跃度参考</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Webpack与Grunt、Gulp的区别？]]></title>
        <id>https://ducenand.github.io//post/webpack-yu-gruntgulp-de-qu-bie</id>
        <link href="https://ducenand.github.io//post/webpack-yu-gruntgulp-de-qu-bie">
        </link>
        <updated>2019-06-14T05:12:45.000Z</updated>
        <summary type="html"><![CDATA[<p>随着前端发展如日冲天，前端项目也越来越复杂，得益于Nodejs的发展，前端模块化、组件化、工程化也大势所趋。这些年Grunt、Gulp到Webpack随着工程化的发展都大行其道。</p>
]]></summary>
        <content type="html"><![CDATA[<p>随着前端发展如日冲天，前端项目也越来越复杂，得益于Nodejs的发展，前端模块化、组件化、工程化也大势所趋。这些年Grunt、Gulp到Webpack随着工程化的发展都大行其道。</p>
<!-- more -->
<p><strong>前端工程化的早期</strong>，主要是解决重复任务的问题。Grunt、Gulp就是其中代表。比如: 压缩、编译less、sass、地址添加hash、替换等。</p>
<p>Grunt官网中就说：</p>
<blockquote>
<p>对于需要反复重复的任务，例如压缩（minification）、编译、单元测试、linting等，完成大部分无聊的工作。</p>
</blockquote>
<p>而如今的Webpack更像<strong>一套前端工程化解决方案</strong>。利用强大插件机制，解决前端静态资源依赖管理的问题。</p>
<p><a name="7KNfw"></a></p>
<h3 id="webpack作者tobias回复与-grunt-gulp-npm脚本的比较">Webpack作者Tobias回复与 Grunt Gulp NPM脚本的比较</h3>
<p><strong>Tobias：</strong> NPM脚本对我而言足矣。实际上，说webpack是Grunt/Gulp的替代器并不完全准确。Grunt和Gulp以及NPM脚本都是**<em>任务执行程序</em>**。<br />Webpack是_<strong>模块打包程序</strong>_。这两类程序的目标不一样。但webpack简化了必须“过度使用”Grunt和Gulp和NPM脚本才能实现的Web开发任务也是事实。NPM脚本才是Grunt和Gulp的替代品。<br />不过，除了纯粹的构建之外，任务运行程序也有存在的理由，比如部署、代码检查、版本管理，等等。</p>
<p><a name="8cFbp"></a></p>
<h3 id="webpack与grunt-gulp运行机制">Webpack与Grunt、Gulp运行机制</h3>
<pre><code># grunt gulp 思路
【遍历源文件】-&gt;【匹配规则】-&gt;【打包】
做不到按需加载，对打包的资源，是否用到，打包过程不关心。

# webpack
【入口】-&gt;【模块依赖加载】-&gt;【依赖分析】-&gt;【打包】
在加载、分析、打包的过程中，可以针对性的做一些解决方案。比如：code split(拆分公共代码)
</code></pre>
<p><a name="vG3Ed"></a></p>
<h3 id="grunt与gulp性能比较">Grunt与Gulp性能比较</h3>
<p><strong>Grunt:</strong> 每个任务处理完成后存放在本地磁盘.tmp目录中，有本地磁盘的I/O操作，会导致打包速度比较慢。
**Gulp: **gulp与grunt都是按任务执行，gulp有一个文件流的概念。每一步构建的结果并不会存在本地磁盘，而是保存在内存中，下一个步骤是可以使用上一个步骤的内存，大大增加了打包的速度。</p>
<p>参考：<br /><a href="https://www.gruntjs.net/">grunt官网</a><br /><a href="http://www.cross-platform-blog.com/tools/interview-with-webpack-author-tobias-koppers/">webpack作者接受参访文章</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[前端历史演变]]></title>
        <id>https://ducenand.github.io//post/qian-duan-li-shi-yan-bian</id>
        <link href="https://ducenand.github.io//post/qian-duan-li-shi-yan-bian">
        </link>
        <updated>2019-06-11T15:03:48.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560857646233-047e33e7-36ea-4825-88e6-eefee7b3a48a.png#align=left&amp;display=inline&amp;height=252&amp;name=image.png&amp;originHeight=504&amp;originWidth=1830&amp;size=40576&amp;status=done&amp;width=915" alt="image.png"><br />2014年初，我加入互联网开发行业，随没经历前端刀工火种的时态，5年的时间，前端技术的百家齐放很是眼花缭乱。我也从套页面后端工程师、jquery写效果到现在的小程序、node、vue转变成一个纯前端。现在回顾一下前端到底发生了哪些历史变化。</p>
]]></summary>
        <content type="html"><![CDATA[<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560857646233-047e33e7-36ea-4825-88e6-eefee7b3a48a.png#align=left&amp;display=inline&amp;height=252&amp;name=image.png&amp;originHeight=504&amp;originWidth=1830&amp;size=40576&amp;status=done&amp;width=915" alt="image.png"><br />2014年初，我加入互联网开发行业，随没经历前端刀工火种的时态，5年的时间，前端技术的百家齐放很是眼花缭乱。我也从套页面后端工程师、jquery写效果到现在的小程序、node、vue转变成一个纯前端。现在回顾一下前端到底发生了哪些历史变化。</p>
<!-- more -->
<p><a name="9KSDm"></a></p>
<h3 id="静态页面-1990~2005">静态页面 1990~2005</h3>
<p>互联网发展早期，前端只负责写静态页面，纯粹的展示功能，JavaScript的作用也只是增加一些特殊效果。这种静态页面不能读取数据库，为了使Web更加充满活力，以PHP、JSP、ASP.NET为主的动态语言相继诞生。<br />这使页面能够获取数据并不断更新，是前后端混合开发模式开端，所有的前端代码和前端数据都是后端生成的，随着后端代码的庞大和逻辑越来越复杂，相继的MVC发展起来。这时后端大多采用MVC模式开发，前端只是后端MVC中的V(视图)；<br />从web的诞生到2005，一直处在_<strong>后端重前端轻</strong>_的状态。</p>
<p><a name="F6uP8"></a></p>
<h3 id="ajax阶段-2005">AJAX阶段 2005</h3>
<p>2004年AJAX技术的诞生改变了前端的发展历史。以Gmail和Google地图这样革命性的产品出现，使得开发者发现，前端的作用不仅仅是展示页面，可以管理数据和用户互动。解决一些糟糕的用户体验，前端页面要想获取后台数据需要刷新整个页面。<br />依稀记得前几年，依托强大的Jquery,一页面的javascript代码使用ajax发送请求渲染DOM的情景。<br /><strong>前端开始慢慢向后端靠拢</strong>。</p>
<p><a name="EKm8A"></a></p>
<h3 id="nodejs-的爆发-2009">NODEJS 的爆发 2009</h3>
<p>2009年Ryan Dahl利用Chrome的V8引擎打造了基于事件循环的异步I/O框架。<br />NODE的诞生，使javascript在服务端的无限可能，更重要的是它构建了一个庞大的生态系统。</p>
<p>2010年1月，NPM作为node的包管理系统首次发布。开发人员可以依照规范编写nodejs模块，发布到npm上，供其他开发人员下载使用。截止目前2019年6月8日，NPM包数量有<strong>1,003,262，<strong>是世界上最大的包模块管理系统</strong>。</strong></p>
<p>Node.js 给开发人员带来了无穷的想象，JavaScript <strong>大有一统天下的趋势</strong>。</p>
<p><a name="yrDTH"></a></p>
<h3 id="前端mv架构阶段-2010">前端MV**架构阶段 2010</h3>
<p>随着 HTML5 小程序 的流行，前端再也不是人们眼中的小玩意了，应用功能开发逐步迁移到了前端，前端的代码逻辑逐渐变得复杂起来。<br />2010年10月Backbone MVP架构发布。<br />2010年10月Angular MVC-&gt;MVVM<br />2013年05月React开源 MVVM<br />2014年07月Vue MVVM</p>
<p>随着这些 MV* 框架的出现，网页逐渐由 Web Site 演变成了 Web App，最终导致了复杂的单页应用（ Single Page Application）的出现。<br />随着 SPA 的兴起，2010年后，前端工程师从开发页面（切模板），逐渐变成了开发**“前端应用”**（跑在浏览器里面的应用程序）。</p>
<p><a name="rMyAn"></a></p>
<h3 id="前端开发app阶段-至今">前端开发App阶段 至今</h3>
<p>随着 iOS 和 Android 等智能手机的广泛使用，移动浏览器也逐步加强了对 HTML5 特性的支持力度。</p>
<p>Web APP，即移动端的网站。一般泛指 SPA(Single Page Application)模式开发出的网站。将页面部署在服务器上，然后用户使用各大浏览器访问，不是独立APP，无法安装和发布。</p>
<p>Hybrid App，即混合开发，也就是半原生半Web的开发模式，有跨平台效果，实质最终发布的仍然是独立的原生APP。</p>
<p>React Native App，Facebook发起的开源的一套新的APP开发方案,使用JS+部分原生语法来实现功能。</p>
<p>May 7, 2019谷歌发布 <a href="https://github.com/flutter/flutter_web">Flutter for web</a>，正式宣布 Flutter 成为全平台框架，支持手机、Web、桌面电脑和嵌入式设备。现在学跨平台应用开发，第一个要看的可能不是 React Native，而是 Flutter。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1560061486934-49c982aa-aea0-4bd9-959b-168a7a66b275.png#align=left&amp;display=inline&amp;height=418&amp;name=image.png&amp;originHeight=836&amp;originWidth=1396&amp;size=272248&amp;status=done&amp;width=698" alt="image.png"><br />今天的前端已经不再是网页诞生之初的样子，每天都有新的技术框架涌现。<br />GitHub + NPM/BOWER + ES6/ES7/Babel/TypeScript + HTML5 + CSS3/SASS/LESS/PostCSS + React/Vue/Angular + Webpack/Browserify/Gulp/Grunt + Node.js/Express/KOA + Hybrid</p>
<p>这就是今天的前端。</p>
<p>参考：<br /><a href="https://blog.csdn.net/freekiteyu/article/details/79927047">前端发展简史</a><br /><a href="https://developers.googleblog.com/2019/05/Flutter-io19.html">全平台框架 Flutter</a>（英文）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[webpack是什么?]]></title>
        <id>https://ducenand.github.io//post/hello-webpack</id>
        <link href="https://ducenand.github.io//post/hello-webpack">
        </link>
        <updated>2019-06-05T12:17:35.000Z</updated>
        <summary type="html"><![CDATA[<p><a name="GYNOz"></a></p>
<h3 id="背景">背景</h3>
<p>webpack的作者是德国纽伦堡<strong>Tobias Koppers</strong>,   webpack的诞生之初主要是想解决代码的拆分问题。这也是webpack这么受欢迎的原因所在。同时也离不开500多位开源贡献者。</p>
]]></summary>
        <content type="html"><![CDATA[<p><a name="GYNOz"></a></p>
<h3 id="背景">背景</h3>
<p>webpack的作者是德国纽伦堡<strong>Tobias Koppers</strong>,   webpack的诞生之初主要是想解决代码的拆分问题。这也是webpack这么受欢迎的原因所在。同时也离不开500多位开源贡献者。</p>
<!-- more -->
<p><a name="SoPw0"></a></p>
<h3 id=""></h3>
<p><a name="kHoc5"></a></p>
<h3 id="解释">解释</h3>
<p><strong>webpack</strong> 是一个现代 JavaScript 应用程序的**<em>静态模块打包工具</em>**。当 webpack 处理应用程序时，它会在内部构建一个 <a href="https://webpack.docschina.org/concepts/dependency-graph/">依赖图(dependency graph)</a>，此依赖图会映射项目所需的每个模块，并生成一个或多个 <em>bundle</em>。</p>
<blockquote>
<p>这是官方文档给出的webpack的解释，这里我提取几个关键词理解。</p>
</blockquote>
<p><a name="PCMFp"></a></p>
<h4 id="理解模块">理解模块</h4>
<p>模块,又称构件,是能够单独命名并独立地完成一定功能的程序语句的集合（即程序代码和数据结构的集合体）。它具有两个基本的特征：外部特征和内部特征。外部特征是指模块跟外部环境联系的接口（即其他模块或程序调用该模块的方式，包括有输入输出参数、引用的全局变量）和模块的功能；内部特征是指模块的内部环境具有的特点（即该模块的局部数据和程序代码）。</p>
<blockquote>
<p>以上是百度百科给模块的定义，前端模块化一般指javascript的模块，最常见的模块就是npm包。每一个模块可能是最小甚至是最优的代码组合。</p>
</blockquote>
<p><a name="d37Sj"></a></p>
<h4 id="静态模块打包工具">静态模块打包工具</h4>
<p>将javascript代码、与其他静态文件组成的不同模块，进行分析、解析压缩打包成浏览器可识别的代码的过程。</p>
<p><a name="PGhKA"></a></p>
<h4 id="依赖图dependency-graph">依赖图（dependency graph）</h4>
<p>任何时候，一个文件依赖于另一个文件，webpack 就把此视为文件之间有_** 依赖关系**_。webpack从命令行或配置文件定义的一个模块列表开始，处理你的应用程序；从入口开始webpack递归的构建一个依赖图，这个依赖图包含着应用程序中所需的每个模块，然后将这些模块打包成少量的bubdle,使浏览器可以执行。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2019/png/173770/1559734733970-08421dc5-5766-4871-919a-233c32b11b87.png#align=left&amp;display=inline&amp;height=455&amp;name=image.png&amp;originHeight=910&amp;originWidth=2030&amp;size=381464&amp;status=done&amp;width=1015" alt="image.png"></p>
<p>通过上图能够简单理解，webpack就像一个黑盒子，通过这个黑盒子的模块（js、ts、png、sass等），将最终转化成浏览器可识别的文件。</p>
<p><a name="xHH6u"></a></p>
<h3 id="webpack能做什么">Webpack能做什么？</h3>
<p>代码转换、文件优化、代码分割、模块合并、自动刷新、代码校验、自动发布</p>
<p>参考：<br />百度百科模块定义：<a href="https://baike.baidu.com/item/%E6%A8%A1%E5%9D%97/437198">https://baike.baidu.com/item/%E6%A8%A1%E5%9D%97/437198</a><br />官网给出的模块解释：<a href="https://webpack.docschina.org/concepts/modules/">https://webpack.docschina.org/concepts/modules/</a><br />官网依赖图解释：<a href="https://webpack.docschina.org/concepts/dependency-graph/">https://webpack.docschina.org/concepts/dependency-graph/</a></p>
]]></content>
    </entry>
</feed>